<EditForm Model="Movie" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Name" />
            <ValidationMessage For="(() => Movie.Name)" />
        </div>
    </div>

    <div class="form-group">
        <label>Release Date:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Movie.ReleaseDate" />
            <ValidationMessage For="(() => Movie.ReleaseDate)" />
        </div>
    </div>

    <div class="form-group">
        <div>
            <InputImg Label="Picture" OnSelectedImage="PicutureSelected" Image="@Movie.Image" />
            <ValidationMessage For="(() => Movie.Image)" />
        </div>
    </div>

    <div class="form-group">
        <label>Genres:</label>
        <div>
            <MultipleSelector Selected="Selected" NoSelected="NotSelected"></MultipleSelector>
        </div>
    </div>

    <button class="btn btn-success" type="submit">Save Changes</button>
</EditForm>

@code {
    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Genre> SelectedGenres { get; set; } = new List<Genre>();
    [Parameter] public List<Genre> NotSelectedGenres { get; set; } = new List<Genre>();

    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

    private void PicutureSelected(string imageBase64)
    {
        Movie.Image = Convert.FromBase64String(imageBase64);
    }

    protected override void OnParametersSet()
    {
        try
        {
            Selected = SelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
            NotSelected = NotSelectedGenres.Select(x =>
            {
                Console.WriteLine($"{x.Id}, {x.Name}");
                return new MultipleSelectorModel(x.Id.ToString(), x.Name);
            }).ToList();
        }
        catch (Exception)
        {

        }
    }

    private async Task OnDataAnnotationsValidated()
    {
        Movie.MovieGenre = Selected
            .Select(x => new MovieGenre { GenreId = int.Parse(x.Key) }).ToList();

        await OnValidSubmit.InvokeAsync(null);
    }
}